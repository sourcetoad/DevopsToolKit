#!/usr/bin/env bash

HOP_PATH=$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)
TOOLKIT_PATH=$(dirname "$HOP_PATH")

LOCAL_DOMAIN=
LOCAL_PORT=
PROXY_DOMAIN=
PROXY_PORT=

PORT_GEN_MAX=65535
PORT_GEN_MIN=10002

source "$TOOLKIT_PATH/bin/_helpers"

function describe {
    local COMMAND_NAME=$1
    local ARGS_LIST=${*:2:(($# - 2))}
    local DESCRIPTION=${!#}
    local CONTENT_LENGTH=$((${#COMMAND_NAME} + ${#ARGS_LIST} + ${#DESCRIPTION}))

    local SEGMENTS=()
    SEGMENTS+=("${FG_C}${COMMAND_NAME}")

    if test $# -gt 2; then
        SEGMENTS+=("${FG_M}${ARGS_LIST}")
    fi

    local DOT_COUNT=$((WIDTH - CONTENT_LENGTH - ${#SEGMENTS[@]} - 3 - 1)) # 3 for "hop", 1 for additional space for last segment
    local DOTS
    DOTS=$(printf '%*s' "$DOT_COUNT" "" | tr ' ' '.')
    SEGMENTS+=("${FG_N}${DOTS}")
    SEGMENTS+=("${FG_N}${DESCRIPTION}")

    join " " "${SEGMENTS[@]}" "${RESET}"
}

function display_help() {
    tag "$BG_G$BOLD" "Sourcetoad Proxy"
    echo "A script that makes it easy to proxy your projects via hop."
    echo
    tag "$BG_Y$BOLD" "Options"
    describe "-h, --help" "Display this help message."
    describe "--local-domain" "Overrides the automatically determined local domain."
    describe "--local-port" "Overrides the default local port of 80."
    describe "--proxy-port" "Specify the port to use for the proxy. Required."
    describe "--proxy-domain" "The subdomain to use for the proxy."
}

function parse_arg() {
    local key=$1
    local value=$2

    if [ "$2" ]; then
        echo "$2"
    else
        output_error "'${key}' requires a non-empty argument."
        exit 1
    fi
}

while :; do
    option=${1%%=*}
    parsed_value=

    case $1 in
        -h|--help)
            display_help
            exit
            ;;
        --local-domain|--local-port|--proxy-port|--proxy-domain)
            parsed_value=$(parse_arg $@)
            ;;
        --local-domain=?*|--local-port=?*|--proxy-port=?*|--proxy-domain=?*)
            parsed_value=$(parse_arg ${1%%=*} ${1#*=})
            ;;
        --local-domain=|--local-port=|--proxy-port=|--proxy-domain=)
            parsed_value=$(parse_arg ${1%%=*})
            ;;
        *)
            ;;
    esac

    if [ $? -ne 0 ]; then
        echo $parsed_value
        exit 1
    fi

    case $option in
        --local-domain)
            LOCAL_DOMAIN=$parsed_value
            ;;
        --local-port)
            LOCAL_PORT=$parsed_value
            ;;
        --proxy-domain)
            PROXY_DOMAIN=$parsed_value
            ;;
        --proxy-port)
            PROXY_PORT=$parsed_value
            ;;
        *)
            break
            ;;
    esac

    shift
done

function locate_docker_file {
    local POTENTIAL_FILES=("docker/docker-compose.yml" "docker-compose.yml")
    for file in "${POTENTIAL_FILES[@]}"; do
        if [ -f "$file" ]; then
            echo "$file"
            return
        fi
    done
}
DOCKER_FILE=$(locate_docker_file)

function locate_docker_file_override {
    local POTENTIAL_FILES=("docker/docker-compose.override.yml" "docker-compose.override.yml")
    for file in "${POTENTIAL_FILES[@]}"; do
        if [ -f "$file" ]; then
            echo "$file"
            return
        fi
    done
}
DOCKER_FILE_OVERRIDE=$(locate_docker_file_override)

function pick_one_virtual_host_from_file() {
    local FILE=$1
    local EXCEPT=$2

    local HOST_STRING=$(sed -nr 's/.*VIRTUAL_HOST=(.*)/\1/p' $FILE)
    local HOSTS
    local HOST

    IFS="," read -ra HOSTS <<< "$HOST_STRING"

    for HOST_ENTRY in "${HOSTS[@]}"; do
      if [ "$HOST_ENTRY" != "$EXCEPT" ]; then
          echo $HOST_ENTRY
          break;
      fi
    done

    if [ -z "HOST" ]; then
        output_error "No VIRTUAL_HOST found in $FILE."
        exit 1
    fi
}

function determine_virtual_host() {
    if [ -z "$DOCKER_FILE" ]; then
        output_error "No docker-compose file found."
        exit 1
    fi

    local HOST=$(pick_one_virtual_host_from_file $DOCKER_FILE)

    if [ $? -ne 0 ]; then
        echo $HOST
        exit 1
    fi

    echo $HOST
}

function determine_virtual_host_override() {
    if [ -z $1 ]; then
        output_error "No local host provided."
        exit 1
    fi

    if [ -z "$DOCKER_FILE_OVERRIDE" ]; then
        output_error "No docker-compose override file found. It is recommended that you create a docker-compose.override.yml file with an override for your VIRTUAL_HOST environment variable."
        exit 1
    fi

    local HOST=$(pick_one_virtual_host_from_file $DOCKER_FILE_OVERRIDE $1)

    if [ $? -ne 0 ]; then
        echo $HOST
        exit 1
    fi

    echo $HOST
}

if [ -z "$LOCAL_DOMAIN" ]; then
    LOCAL_DOMAIN=$(determine_virtual_host)

    if [ $? -ne 0 ]; then
        echo $LOCAL_DOMAIN
        exit 1
    fi
fi

if [ -z "$LOCAL_PORT" ]; then
    LOCAL_PORT=80
fi

if [ -z "$PROXY_DOMAIN" ]; then
    PROXY_DOMAIN=$(determine_virtual_host_override $LOCAL_DOMAIN)

    if [ $? -ne 0 ]; then
        echo $PROXY_DOMAIN
        exit 1
    fi
fi

if [ -z "$PROXY_PORT" ]; then
    PROXY_PORT=$(($RANDOM%(PORT_GEN_MIN-PORT_GEN_MAX+1)+PORT_GEN_MIN))
    output_info "No proxy port specified. Using random port: ${PROXY_PORT}"
fi

echo
output_info "Starting proxy... $FG_C${LOCAL_DOMAIN}$FG_N:$FG_M${LOCAL_PORT}$RESET -> $FG_C${PROXY_DOMAIN}$FG_N:$FG_M${PROXY_PORT}$RESET"
echo
output_tagged_string "$BG_N" "Proxy URL" "https://$PROXY_DOMAIN"
echo
ssh -tR ${PROXY_PORT}:${LOCAL_DOMAIN}:${LOCAL_PORT} proxy@local.sourcetoadtest.com sirtunnel.py ${PROXY_DOMAIN} ${PROXY_PORT}
